'use client'
import { useEffect, useMemo, useState } from 'react'
import { supabase } from '@/lib/supabaseClient'
import AdminGuard from '@/components/AdminGuard'

type Row = {
  id?: string
  event_date: string
  year?: number
  title: string
  description?: string
  tags?: string[]
  image_url?: string | null
  sort_order?: number
}

export default function AdminTimelinePage() {
  const empty: Row = { event_date: new Date().toISOString().slice(0,10), title: '', description: '', tags: [] }
  const [rows, setRows] = useState<Row[]>([])
  const [form, setForm] = useState<Row>(empty)
  const [saving, setSaving] = useState(false)
  const [msg, setMsg] = useState<string | null>(null)

  async function load() {
    const { data, error } = await supabase
      .from('timeline')
      .select('*')
      .order('event_date', { ascending: false })
      .order('sort_order', { ascending: true })
    if (!error) setRows(data as Row[])
  }

  useEffect(() => { load() }, [])

  function onChange<K extends keyof Row>(k: K, v: Row[K]) {
    setForm(prev => ({ ...prev, [k]: v }))
  }

  async function save() {
    setSaving(true); setMsg(null)
    const { data: session } = await supabase.auth.getSession()
    const userId = session.session?.user.id

    const payload = { ...form, updated_by: userId }
    let error
    if (form.id) {
      ;({ error } = await supabase.from('timeline').update(payload).eq('id', form.id))
    } else {
      ;({ error } = await supabase.from('timeline').insert(payload))
    }
    setSaving(false)
    if (error) { setMsg('Hata: ' + error.message); return }
    setForm(empty)
    setMsg('Kaydedildi ✅')
    await load()
  }

  async function edit(r: Row) {
    setForm({ ...r, event_date: r.event_date?.slice(0,10) })
    window.scrollTo({ top: 0, behavior: 'smooth' })
  }

  async function del(id?: string) {
    if (!id) return
    if (!confirm('Silinsin mi?')) return
    const { error } = await supabase.from('timeline').delete().eq('id', id)
    if (!error) setRows(rows.filter(r => r.id !== id))
  }

  async function onPickImage(e: React.ChangeEvent<HTMLInputElement>) {
    const f = e.target.files?.[0]
    if (!f) return
    const ext = f.name.split('.').pop()
    const key = `timeline/${crypto.randomUUID()}.${ext}`
    const up = await supabase.storage.from('media').upload(key, f, { upsert: true })
    if (up.error) { setMsg('Yükleme hatası: ' + up.error.message); return }
    const pub = supabase.storage.from('media').getPublicUrl(key)
    onChange('image_url', pub.data.publicUrl)
  }

  // basit yıl gruplama
  const grouped = useMemo(() => {
    const mp = new Map<number, Row[]>()
    rows.forEach(r => {
      const y = Number((r as any).year ?? new Date(r.event_date).getFullYear())
      mp.set(y, [...(mp.get(y) ?? []), r])
    })
    return Array.from(mp.entries()).sort((a,b)=>b[0]-a[0])
  }, [rows])

  return (
    <AdminGuard>
      <main className="container" style={{ padding: 24, display:'grid', gap: 16 }}>
        <h1>Zaman Çizelgesi (Admin)</h1>

        <div className="card" style={{ padding:16, display:'grid', gap:12 }}>
          <div style={{ display:'grid', gap:8, gridTemplateColumns:'1fr 1fr' }}>
            <label>
              Tarih<br/>
              <input type="date" value={form.event_date} onChange={e=>onChange('event_date', e.target.value)} />
            </label>
            <label>
              Başlık<br/>
              <input value={form.title} onChange={e=>onChange('title', e.target.value)} placeholder="Örn: Proje lansmanı" />
            </label>
          </div>
          <label>
            Açıklama<br/>
            <textarea rows={5} value={form.description ?? ''} onChange={e=>onChange('description', e.target.value)} />
          </label>
          <label>
            Etiketler (virgüllü)<br/>
            <input value={(form.tags ?? []).join(',')} onChange={e=>onChange('tags', e.target.value.split(',').map(s=>s.trim()).filter(Boolean))} />
          </label>
          <div style={{display:'flex', alignItems:'center', gap:12}}>
            {/* eslint-disable-next-line @next/next/no-img-element */}
            {form.image_url ? <img src={form.image_url} alt="" style={{width:120, height:80, objectFit:'cover', borderRadius:8, border:'1px solid #333'}} /> : <div style={{width:120,height:80,border:'1px dashed #555',borderRadius:8,display:'grid',placeItems:'center'}}>Görsel yok</div>}
            <input type="file" accept="image/*" onChange={onPickImage} />
          </div>
          <div style={{display:'flex', gap:8}}>
            <button disabled={saving} onClick={save}>{form.id ? 'Güncelle' : 'Ekle'}</button>
            {form.id && <button onClick={()=>setForm(empty)} type="button">Yeni kayıt</button>}
          </div>
          {msg && <div style={{color:'#7dd3fc'}}>{msg}</div>}
        </div>

        {/* Liste */}
        <div className="card" style={{ padding:16 }}>
          {grouped.map(([y, items])=>(
            <div key={y} style={{marginBottom:12}}>
              <h3 style={{margin:'12px 0'}}>{y}</h3>
              <ul style={{listStyle:'none', padding:0, margin:0, display:'grid', gap:8}}>
                {items.sort((a,b)=>a.event_date<b.event_date?1:-1).map(it=>(
                  <li key={it.id} style={{display:'grid', gridTemplateColumns:'140px 1fr auto', gap:8, alignItems:'center', border:'1px solid #2a2a2a', borderRadius:10, padding:8}}>
                    <small style={{opacity:.7}}>{new Date(it.event_date).toLocaleDateString('tr-TR')}</small>
                    <div>
                      <div style={{fontWeight:600}}>{it.title}</div>
                      <div style={{opacity:.8, fontSize:14}}>{it.description}</div>
                    </div>
                    <div style={{display:'flex', gap:8}}>
                      <button onClick={()=>edit(it)} type="button">Düzenle</button>
                      <button onClick={()=>del(it.id)} type="button" style={{color:'#fca5a5'}}>Sil</button>
                    </div>
                  </li>
                ))}
              </ul>
            </div>
          ))}
        </div>
      </main>
    </AdminGuard>
  )
}
